{"debug_symbols":[{"locations":{"160":[{"span":{"start":374,"end":443},"file":1},{"span":{"start":259,"end":300},"file":2},{"span":{"start":1104,"end":1193},"file":35}],"161":[{"span":{"start":374,"end":443},"file":1},{"span":{"start":259,"end":300},"file":2}],"162":[{"span":{"start":374,"end":443},"file":1},{"span":{"start":318,"end":338},"file":2},{"span":{"start":1346,"end":1379},"file":35}],"163":[{"span":{"start":374,"end":443},"file":1},{"span":{"start":318,"end":338},"file":2},{"span":{"start":1346,"end":1379},"file":35}],"164":[{"span":{"start":542,"end":582},"file":1},{"span":{"start":216,"end":249},"file":4}],"165":[{"span":{"start":595,"end":630},"file":1}],"166":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":530,"end":556},"file":11},{"span":{"start":123,"end":150},"file":21}],"167":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":530,"end":556},"file":11},{"span":{"start":123,"end":150},"file":21}],"168":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":530,"end":556},"file":11},{"span":{"start":123,"end":150},"file":21}],"169":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":530,"end":556},"file":11},{"span":{"start":123,"end":150},"file":21}],"170":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":530,"end":556},"file":11},{"span":{"start":123,"end":150},"file":21}],"171":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":530,"end":556},"file":11},{"span":{"start":123,"end":150},"file":21}],"172":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":530,"end":556},"file":11},{"span":{"start":123,"end":150},"file":21}],"173":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":530,"end":556},"file":11},{"span":{"start":123,"end":150},"file":21}],"174":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":530,"end":556},"file":11},{"span":{"start":123,"end":150},"file":21}],"175":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":530,"end":556},"file":11},{"span":{"start":123,"end":150},"file":21}],"176":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":530,"end":556},"file":11},{"span":{"start":123,"end":150},"file":21}],"177":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":530,"end":556},"file":11},{"span":{"start":123,"end":150},"file":21}],"178":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":530,"end":556},"file":11},{"span":{"start":123,"end":150},"file":21}],"179":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":530,"end":556},"file":11},{"span":{"start":123,"end":150},"file":21}],"180":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":530,"end":556},"file":11},{"span":{"start":123,"end":150},"file":21}],"181":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":530,"end":556},"file":11},{"span":{"start":123,"end":150},"file":21}],"182":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":530,"end":556},"file":11},{"span":{"start":123,"end":150},"file":21}],"183":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":530,"end":556},"file":11},{"span":{"start":123,"end":150},"file":21}],"184":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":530,"end":556},"file":11},{"span":{"start":123,"end":150},"file":21}],"185":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":530,"end":556},"file":11},{"span":{"start":123,"end":150},"file":21}],"186":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":530,"end":556},"file":11},{"span":{"start":123,"end":150},"file":21}],"187":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":530,"end":556},"file":11},{"span":{"start":123,"end":150},"file":21}],"188":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":530,"end":556},"file":11},{"span":{"start":123,"end":150},"file":21}],"189":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":530,"end":556},"file":11},{"span":{"start":123,"end":150},"file":21}],"190":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":530,"end":556},"file":11},{"span":{"start":123,"end":150},"file":21}],"191":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"192":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"193":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"194":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"195":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"196":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"197":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"198":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"199":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"200":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"201":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"202":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"203":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"204":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"205":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"206":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"207":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"208":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"209":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"210":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"211":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"212":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"213":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"214":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"215":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"216":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"217":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"218":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"219":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"220":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"221":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"222":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"223":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"224":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"225":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"226":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"227":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"228":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"229":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"230":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"231":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"232":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"233":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"234":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"235":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"236":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"237":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"238":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"239":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"240":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"241":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"242":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"243":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"244":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"245":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"246":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"247":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"248":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"249":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"250":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"251":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"252":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"253":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"254":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"255":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"256":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"257":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"258":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"259":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"260":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"261":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"262":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"263":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"264":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"265":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"266":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"267":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"268":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"269":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"270":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"271":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"272":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"273":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"274":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"275":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"276":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"277":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"278":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"279":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"280":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"281":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"282":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"283":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"284":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"285":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"286":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"287":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"288":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"289":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"290":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"291":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"292":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"293":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"294":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"295":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"296":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"297":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"298":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"299":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"300":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"301":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"302":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"303":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"304":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"305":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"306":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"307":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"308":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"309":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"310":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"311":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"312":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"313":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"314":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"315":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"316":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"317":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"318":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"319":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"320":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"321":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"322":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"323":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"324":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"325":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"326":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"327":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"328":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"329":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"330":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"331":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"332":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"333":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"334":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"335":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"336":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"337":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"338":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"339":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"340":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"341":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"342":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"343":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"344":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"345":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"346":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"347":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"348":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":629,"end":642},"file":11}],"349":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":717,"end":729},"file":11}],"350":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"351":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"352":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"353":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"354":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"355":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"356":[{"span":{"start":653,"end":714},"file":1},{"span":{"start":823,"end":869},"file":11},{"span":{"start":216,"end":249},"file":4}],"357":[{"span":{"start":727,"end":750},"file":1}],"358":[{"span":{"start":767,"end":794},"file":1}]}}],"file_map":{"1":{"source":"use dep::std;\nuse dep::ecrecover;\n\nglobal DEPTH = 12;\n\nfn main(\n  pub_key: [u8; 64],\n  signature: [u8; 64],\n  hashed_message: pub [u8; 32],\n  nullifier: pub Field,\n  merkle_path: [Field; DEPTH],\n  index: Field,\n  merkle_root: pub Field,\n  claimer_priv: Field,\n  claimer_pub: pub Field\n) {\n    let key = ecrecover::secp256k1::PubKey::from_unified(pub_key);\n    let address = ecrecover::ecrecover(key.pub_x, key.pub_y, signature, hashed_message);\n\n    let signature_as_fields = signature.map(|x : u8| x as Field);\n    let calculatedNullifier = std::hash::pedersen(signature_as_fields);\n    assert(calculatedNullifier[0] == nullifier);\n\n    let new_root = std::merkle::compute_merkle_root(address, index, merkle_path);\n    assert(new_root == merkle_root);\n  \n    assert(claimer_priv == claimer_pub);\n}\n\n\n// #[test]\n// fn test_main() {\n//     let pub_key = [\n//         131,  24,  83,  91,  84,  16, 93,  74, 122, 174,  96,\n//         192, 143, 196,  95, 150, 135, 24,  27,  79, 223, 198,\n//         37, 189,  26, 117,  63, 167, 57, 127, 237, 117,  53,\n//         71, 241,  28, 168, 105, 102, 70, 242, 243, 172, 176,\n//         142,  49,   1, 106, 250, 194, 62,  99,  12,  93,  17,\n//         245, 159,  97, 254, 245, 123, 13,  42, 165\n//     ];\n//     let signature = [\n//         1,  83,  82, 167, 184,  77, 226, 104,   5,  27, 151,\n//         91, 202, 127,  17, 183,  75,  31, 190, 253, 159, 116,\n//         155,  13,  24, 178,  40, 165, 129,  90, 103, 204,  42,\n//         164, 230,  62,  73, 181, 169,  61, 251, 221, 128, 221,\n//         14,  19, 179,  25, 107, 132,  10, 188, 149,   0, 197,\n//         52, 151, 239, 244, 103, 215, 224,  56, 242\n//     ];\n//     let hashed_message = [\n//         3,  57, 199, 96, 145,  58, 183, 241,\n//         206, 140,  36, 34, 165, 163,  17, 210,\n//         97, 254, 154, 79,  91, 223, 149,  18,\n//         3, 210, 111, 56, 246, 219,  19, 104\n//     ];\n\n\n//     let nullifier = 0x0e860d099661305414f1218fd4ba4ea3f71ef33123a6263cae21bf132ff8dac1;\n//     let merkle_path = [\n//         0x00000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8,\n//         0x0d76959f68406fde33752accbb712a425e9dc101b1ea4db5e3f9f9d0fb8bcd6e,\n//         0x20476c92bde69215bc26b1c58e4871eeb662e03c426767e4c603d9df7ecf630f,\n//         0x1306d71bfd84cac61cdfc548510f1877a9b00270355ba593aa85b24696efcb1e\n//     ];\n//     let index = 0;\n//     let merkle_root = 0x0495e2611f40a6533787dd22f7f6ac85ed0d30511da78935fe940334bb73cc7d;\n//     let claimer = 0x3c44cdddb6a900fa2b585dd299e03d12fa4293bc;\n\n//     main(pub_key, signature, hashed_message, nullifier, merkle_path, index, merkle_root, claimer, claimer);\n// }\n","path":"/Users/zpedro/Documents/GitHub/noir-examples/stealthdrop/circuits/main/src/main.nr"},"2":{"source":"use dep::std;\n \nmod secp256k1;\n\npub fn ecrecover(\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    signature: [u8; 64], // clip v value\n    hashed_message: [u8; 32]\n) -> Field {\n    let key = secp256k1::PubKey::from_xy(pub_key_x, pub_key_y);\n\n    assert(key.verify_sig(signature, hashed_message));\n    let addr = key.to_eth_address();\n\n    addr\n}\n\n#[test]\nfn test_ecrecover() {\n    let pub_key_x = [131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223, 198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117];\n    let pub_key_y = [53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99, 12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165];\n    let signature = [57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82, 71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213, 80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23, 136, 75, 29, 177];\n    let hashed_message = [13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112, 68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102];\n\n    let addr = ecrecover(pub_key_x, pub_key_y, signature, hashed_message);\n    assert(addr == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n","path":"/Users/zpedro/nargo/github.com/signorecello/ecrecover-noir.gitv0.16.1/src/lib.nr"},"4":{"source":"mod poseidon;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\npub fn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\npub fn pedersen_hash<N>(input : [Field; N]) -> Field {\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(_input : [Field; N], _separator : u32) -> Field {}\n\n#[foreign(hash_to_field_128_security)]\npub fn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\npub fn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n","path":"std/hash.nr"},"11":{"source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n         } else {\n            (current, hash_path[i])\n         };\n\n      current = crate::hash::pedersen([hash_left, hash_right])[0];\n    };\n    current\n}\n","path":"std/merkle.nr"},"21":{"source":"\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n","path":"std/field.nr"},"35":{"source":"use dep::std;\n\nuse dep::array_helpers;\n\nstruct PubKey {\n    pub_x: [u8; 32],\n    pub_y: [u8; 32],\n}\n\nfn split_uncompressed_pub_key(\n    pub_key: [u8; 65]\n) -> ([u8; 32], [u8; 32]) {\n    let mut pub_key_x: [u8; 32] = [0; 32];\n    let mut pub_key_y: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        pub_key_x[i] = pub_key[i + 1];\n        pub_key_y[i] = pub_key[i + 32 + 1];\n    };\n\n    (pub_key_x, pub_key_y)\n}\n\nimpl PubKey {\n    pub fn from_xy(pub_x: [u8; 32], pub_y: [u8; 32]) -> PubKey {\n        PubKey {\n            pub_x,\n            pub_y,\n        }\n    }\n\n    pub fn from_unified(pub_key: [u8; 64]) -> PubKey {\n        let (key_x, key_y) = array_helpers::split_u8_64(pub_key);\n\n        PubKey {\n            pub_x: key_x,\n            pub_y: key_y,\n        }\n    }\n\n    fn from_uncompressed(pub_key: [u8; 65]) -> PubKey {\n        assert(pub_key[0] == 0x04);\n        let (key_x, key_y) = split_uncompressed_pub_key(pub_key);\n\n        PubKey {\n            pub_x: key_x,\n            pub_y: key_y,\n        }\n    }\n\n    fn verify_sig(self, signature: [u8; 64], hashed_message: [u8; 32]) -> bool {\n        std::ecdsa_secp256k1::verify_signature(self.pub_x, self.pub_y, signature, hashed_message)\n    }\n\n    fn to_eth_address(self) -> Field {\n        let pub_key = array_helpers::u8_32_to_u8_64(self.pub_x, self.pub_y);\n        let hashed_pub_key = std::hash::keccak256(pub_key, 64);\n\n        let mut addr: Field = 0;\n        for i in 0..20 {\n            // shift left by 8 and add the new value\n            addr = (addr * 256) + hashed_pub_key[i + 12] as Field;\n        }\n\n        addr\n    }\n\n    fn ecrecover(\n        self,\n        signature: [u8; 64],\n        hashed_message: [u8; 32]\n    ) -> Field {\n        assert(self.verify_sig(signature, hashed_message));\n\n        self.to_eth_address()\n    }\n}\n\n\n#[test]\nfn test_ecrecover_via_key() {\n    let pub_key_x = [131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223, 198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117];\n    let pub_key_y = [53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99, 12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165];\n    let signature = [57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82, 71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213, 80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23, 136, 75, 29, 177];\n    let hashed_message = [13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112, 68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102];\n\n    let key = PubKey::from_xy(pub_key_x, pub_key_y);\n    assert(key.ecrecover(signature, hashed_message) == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n","path":"/Users/zpedro/nargo/github.com/signorecello/ecrecover-noir.gitv0.16.1/src/secp256k1.nr"}}}